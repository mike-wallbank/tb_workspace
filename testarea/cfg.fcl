physics: {
   analyzers: {
      evdisp: {
         module_label: "evdisp"
         module_type: "EVD"
      }
   }
   end_paths: [
      "evd"
   ]
   evd: [
      "evdisp"
   ]
}
process_name: "EVD"
services: {
   BackTracker: {
      DoHitsCheck: true
      GeantModuleLabel: "geantgen"
      MCOverlayMode: false
      MRMode: false
      MinContribFrac: 1e-1
      MinPhysicsFrac: 5e-1
      MinPhysicsHits: 4
      PhotonModuleLabel: "photrans"
      TrueEnergyModuleLabel: "geantgen"
      service_type: "BackTracker"
   }
   BadChanList: {
      AbortIfNoSubrun: true
      AbortIfNoneFound: true
      AbortOnSmallRunNum: false
      ApplyBadChan: 1
      ApplyFEBDropout: false
      ApplyKnownBadChannels: true
      BadChanCSVFile: ""
      CellHitLabel: "calhit"
      EventCheck: true
      FEBDropoutTag: "v1.0"
      KnownBadChannels: [
         "2-06-04-62",
         "2-06-04-63",
         "2-05-10-62",
         "2-05-10-63",
         "2-08-11-15",
         "2-08-11-14",
         "1-01-04-06",
         "1-01-04-07",
         "1-01-02-61",
         "1-01-02-62",
         "2-05-11-04",
         "2-05-11-06",
         "2-08-12-04",
         "2-08-11-05",
         "2-08-07-18",
         "2-08-07-19",
         "2-02-06-46",
         "2-02-06-47",
         "2-04-06-62",
         "2-04-06-63",
         "2-10-02-32",
         "2-10-02-33",
         "2-11-04-57",
         "2-11-04-58"
      ]
      MCRunNumber: 0
      MCSubrunNumber: 0
      NewCosmicEffTable: false
      PedestalThresholdHigh: 4095
      PedestalThresholdLow: 0
      RandomBadChannelFraction: -1
      RawDigitLabel: "daq"
      ValidityTagFarDet: ""
      ValidityTagNearDet: ""
      ValidityTagTestBeam: ""
      VldRunGrouping: 10
      service_type: "BadChanList"
   }
   CMap: {
      AbortIfLoadFails: true
      UseExceptions: false
      Verbosity: 0
      service_type: "CMap"
   }
   Calibrator: {
      AbsConstsCSVPath: ""
      AbsEpochTag: "v2.6"
      AttenCSVPath: ""
      AttenEpochTag: "v2.6"
      CalibrationMode: "default"
      CellByCellCalibRandomOffset: 0
      CellByCellCalibRandomOffsetHighResolution: false
      CellByCellCalibRandomOffsetSeed: 24680
      DriftCSV: ""
      DriftConstsCSVPath: ""
      DriftEpochTag: ""
      DriftGradient: 0
      DriftReference: 0
      Gain: -1
      MakeSinglePointCellHits: false
      MaskUncalibratedChannelsInMC: true
      ReadEpochsFromCSV: true
      SimulateDrift: false
      Tag: "v15"
      TimingConstsCSVPath: ""
      TimingEpochTag: "v2.5"
      TimingTag: "tv6"
      UseAbsEpochs: true
      UseAttenEpochs: true
      UseCSVsFromUPS: true
      UseCellByCellCalibRandomOffset: false
      UseDrift: false
      UseDriftEpochs: true
      UseGainSetting4Abs: false
      UseGainSetting4Atten: false
      UseTimingEpochs: true
      UseTimingOffsets: true
      UseXFunction: false
      UseYFunction: false
      XMuCg100FunctionForm: ""
      XMuCg100FunctionParams: []
      Xg100FunctionForm: ""
      Xg100FunctionParams: []
      Xg140FunctionForm: ""
      Xg140FunctionParams: []
      Yg100FunctionForm: ""
      Yg100FunctionParams: []
      Yg140FunctionForm: ""
      Yg140FunctionParams: []
      default: {
         ShapeTableFilenameFDData: "Calibrator/adc_shape_fit_table_fd_460_7000.root"
         ShapeTableFilenameFDMC: "Calibrator/adc_shape_fit_table_fd_380_7000.root"
         ShapeTableFilenameNDData: "Calibrator/adc_shape_fit_table_nd_140_4500.root"
         ShapeTableFilenameNDMC: "Calibrator/adc_shape_fit_table_nd_140_4500.root"
      }
      newfunc: {
         ShapeTableFilenameFDData: "Calibrator/adc_shape_fit_table_fd_410_9000_110000.root"
         ShapeTableFilenameFDMC: "Calibrator/adc_shape_fit_table_fd_424_10449_110000.root"
         ShapeTableFilenameNDData: "Calibrator/adc_shape_fit_table_nd_116_6729_147000.root"
         ShapeTableFilenameNDMC: "Calibrator/adc_shape_fit_table_nd_116_6729_147000.root"
      }
      service_type: "Calibrator"
   }
   CatalogInterface: {
      service_provider: "TrivialFileDelivery"
      service_type: "CatalogInterface"
   }
   Colors: {
      BlackOnWhite: {
         doc: "basic palette"
         gui: "rb:white on black,black on white"
         val: 0
      }
      CalQ_HVPairs: {
         doc: "(h1,h2),(v1,v2) pairs that define custom color scales"
         gui: "te"
         val: [
            60,
            -120,
            2.5e-1,
            7.5e-1
         ]
      }
      CalQ_N: {
         doc: "How many colors in scale?"
         gui: "te"
         val: 64
      }
      CalQ_Palette: {
         doc: "Which color scale to use"
         gui: "lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMagenta,Sequential,Focus,Custom"
         val: "Custom"
      }
      CalQ_Range: {
         doc: "Lower and upper limits of scale"
         gui: "te"
         val: [
            4,
            4096
         ]
      }
      CalQ_Reverse: {
         doc: "Should we reverse the order of the colors?"
         gui: "rb:unflipped,flipped"
         val: 0
      }
      CalQ_Scale: {
         doc: "How to distribute colors throughout scale"
         gui: "lbs:linear,log,sqrt"
         val: "log"
      }
      CalQ_UnderOverflowColors: {
         doc: "Colors to use for underflows and overflows"
         gui: "te"
         val: [
            -1,
            -1
         ]
      }
      CalT_HVPairs: {
         doc: "h,v pairs that define custom color scales"
         gui: "te"
         val: [
            0,
            0,
            0,
            0
         ]
      }
      CalT_N: {
         doc: "How many colors in scale?"
         gui: "te"
         val: 60
      }
      CalT_Palette: {
         doc: "Which color scale to use"
         gui: "lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMagenta,Sequential,Focus,Custom"
         val: "BlueToRedII"
      }
      CalT_Range: {
         doc: "Lower and upper limits of scale"
         gui: "te"
         val: [
            -50,
            550
         ]
      }
      CalT_Reverse: {
         doc: "Should we reverse the order of the colors?"
         gui: "rb:unflipped,flipped"
         val: 0
      }
      CalT_Scale: {
         doc: "How to distribute colors throughout scale"
         gui: "lbs:linear,log,sqrt"
         val: "linear"
      }
      CalT_UnderOverflowColors: {
         doc: "Colors to use for underflows and overflows"
         gui: "te"
         val: [
            -1,
            -1
         ]
      }
      ColorScales: {
         doc: "List of color scales"
         gui: "te"
         val: [
            "RawQ",
            "RawT"
         ]
      }
      RawQ_HVPairs: {
         doc: "(h1,h2),(v1,v2) pairs that define custom color scales"
         gui: "te"
         val: [
            60,
            -120,
            2.5e-1,
            7.5e-1
         ]
      }
      RawQ_N: {
         doc: "How many colors in scale?"
         gui: "te"
         val: 64
      }
      RawQ_Palette: {
         doc: "Which color scale to use"
         gui: "lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMagenta,Sequential,Focus,Custom"
         val: "BlueToRedII"
      }
      RawQ_Range: {
         doc: "Lower and upper limits of scale"
         gui: "te"
         val: [
            32,
            4096
         ]
      }
      RawQ_Reverse: {
         doc: "Should we reverse the order of the colors?"
         gui: "rb:unflipped,flipped"
         val: 0
      }
      RawQ_Scale: {
         doc: "How to distribute colors throughout scale"
         gui: "lbs:linear,log,sqrt"
         val: "log"
      }
      RawQ_UnderOverflowColors: {
         doc: "Colors to use for underflows and overflows"
         gui: "te"
         val: [
            -1,
            -1
         ]
      }
      RawT_HVPairs: {
         doc: "h,v pairs that define custom color scales"
         gui: "te"
         val: [
            0,
            0,
            0,
            0
         ]
      }
      RawT_N: {
         doc: "How many colors in scale?"
         gui: "te"
         val: 60
      }
      RawT_Palette: {
         doc: "Which color scale to use"
         gui: "lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMagenta,Sequential,Focus,Custom"
         val: "BlueToRedII"
      }
      RawT_Range: {
         doc: "Lower and upper limits of scale"
         gui: "te"
         val: [
            -50,
            550
         ]
      }
      RawT_Reverse: {
         doc: "Should we reverse the order of the colors?"
         gui: "rb:unflipped,flipped"
         val: 0
      }
      RawT_Scale: {
         doc: "How to distribute colors throughout scale"
         gui: "lbs:linear,log,sqrt"
         val: "linear"
      }
      RawT_UnderOverflowColors: {
         doc: "Colors to use for underflows and overflows"
         gui: "te"
         val: [
            -1,
            -1
         ]
      }
      service_type: "Colors"
   }
   Detector: {
      service_type: "Detector"
   }
   EventDisplay: {
      AutoAdvanceInterval: 1000
      AutoPrintMax: 0
      AutoPrintPattern: "$HOME/evt_%s_%d.gif"
      EchoPrint: false
      EchoPrintFile: "$HOME/evt_echo.gif"
      service_type: "EventDisplay"
   }
   FiberBrightness: {
      BrightnessFile_FD: "PhotonTransport/fdBrightnessFromCosmics.root"
      BrightnessFile_ND: "PhotonTransport/ndBrightnessFromCosmics.root"
      BrightnessFile_TB: "PhotonTransport/tbBrightnessFromCosmics.root"
      BrightnessLabel: "photrans"
      BrightnessMapName: "BrightnessByBin"
      BrightnessValueMapName: "BrightnessByCell"
      BrightnessValueName: "BrightnessValue"
      ReadFromFile: false
      service_type: "FiberBrightness"
   }
   FileTransfer: {
      service_provider: "TrivialFileTransfer"
      service_type: "FileTransfer"
   }
   Geometry: {
      ForceUseFCLOnly: true
      GDML: "Geometry/gdml/testbeam-2x2-2block-xtru-vacuum-stagger.gdml"
      StoreTempGeo: "/tmp"
      fd: {
         BigBoxRange: 7500
         BigBoxUsed: false
         FiducialVolumeXHi: 50
         FiducialVolumeXLo: 50
         FiducialVolumeYHi: 50
         FiducialVolumeYLo: 50
         FiducialVolumeZHi: 50
         FiducialVolumeZLo: 50
      }
      nd: {
         BigBoxRange: 1500
         BigBoxUsed: false
         FiducialVolumeXHi: 20
         FiducialVolumeXLo: 20
         FiducialVolumeYHi: 20
         FiducialVolumeYLo: 20
         FiducialVolumeZHi: 20
         FiducialVolumeZLo: 20
      }
      ndos: {
         BigBoxRange: 1500
         BigBoxUsed: false
         FiducialVolumeXHi: 20
         FiducialVolumeXLo: 20
         FiducialVolumeYHi: 20
         FiducialVolumeYLo: 20
         FiducialVolumeZHi: 20
         FiducialVolumeZLo: 20
      }
      service_type: "Geometry"
      tb: {
         BigBoxRange: 1500
         BigBoxUsed: true
         FiducialVolumeXHi: 20
         FiducialVolumeXLo: 20
         FiducialVolumeYHi: 20
         FiducialVolumeYLo: 20
         FiducialVolumeZHi: 20
         FiducialVolumeZLo: 20
      }
   }
   GeometryDrawingOptions: {
      DimDisabled: {
         doc: "Make disabled channels dimmer?"
         gui: "rb:off,on"
         val: 1
      }
      DisabledColor: {
         doc: "Color for disabled channels"
         gui: "te"
         val: 19
      }
      EnabledColor: {
         doc: "Color for enabled channels"
         gui: "te"
         val: 18
      }
      FiducialBounds: {
         doc: "For fiducial-user, specify the low x,y,z and high x,y,z of the fiducial box, just like you would for a TLegend."
         gui: "te"
         val: [
            -180,
            -180,
            100,
            180,
            180,
            1500
         ]
      }
      Flip: {
         doc: "Display with axes reversed"
         gui: "cb:x,y,z"
         val: 0
      }
      HighlightCell: {
         doc: "Cell number of cell to highlight"
         gui: "te"
         val: -1
      }
      HighlightPlane: {
         doc: "Plane number of cell to highlight"
         gui: "te"
         val: -1
      }
      Label: {
         doc: "Additional labels for display"
         gui: "cb:plane-cell numbers, compass"
         val: 0
      }
      Outline: {
         doc: "Which outlines to draw?"
         gui: "cb:detector,fiducial-user,grid,DCMs,cells,badboxes"
         val: 1
      }
      SliceBoxSize: {
         doc: "For slice box, specify the x,y,z dimensions of the box drawn around the slice."
         gui: "te"
         val: [
            150,
            150,
            1000
         ]
      }
      ViewingAngles3D: {
         doc: "3D viewing angles theta,phi,psi"
         gui: "te"
         val: [
            35,
            120,
            -75
         ]
      }
      ZRange: {
         doc: "For zoom partial option, specify the Z range"
         gui: "te"
         val: -1
      }
      Zoom: {
         doc: "Auto zoom the display to interesting regions"
         gui: "rb:full,hits,truth,slice,sliceBox,partial"
         val: 0
      }
      service_type: "GeometryDrawingOptions"
   }
   HoughCalc: {
      service_type: "HoughCalc"
   }
   IFBeam: {
      service_type: "IFBeam"
   }
   IFDH: {
      IFDH: {
         IFDH_BASE_URI: "http://samweb.fnal.gov:8480/sam/nova/api"
      }
      service_type: "IFDH"
   }
   LiveGeometry: {
      CalHitLabel: "calhit"
      CheckBadChannels: true
      NoRunHistory: false
      Verbose: false
      service_type: "LiveGeometry"
   }
   MagneticField: {
      FieldDescriptions: [
         {
            ConstantField: [
               0,
               0,
               0
            ]
            MagnetizedVolume: "vWorld"
            UseField: 0
         }
      ]
      service_type: "MagneticField"
   }
   PlotDrawingOptions: {
      PadDescription: [
         "Module/plot_name_1/lcolor=2,mstyle=24,mcolor=2",
         "Module/plot_name_2/logy"
      ]
      service_type: "PlotDrawingOptions"
   }
   RandomNumberGenerator: {
      service_type: "RandomNumberGenerator"
   }
   RawDrawingOptions: {
      ADCBinSize: {
         doc: "ADC bin size"
         gui: "sl:1,128"
         val: 4
      }
      ADCRange: {
         doc: "ADC histogram range"
         gui: "sl:1,4096"
         val: [
            8,
            4096
         ]
      }
      CellHitsModules: {
         doc: "Backup CellHit source"
         gui: "lbm:calhit,another"
         val: [
            "calhit"
         ]
      }
      CellHitsModulesAdd: {
         doc: "Additional CellHit modules"
         gui: "te"
         val: []
      }
      Color: {
         doc: "Use color to show time or charge of hits?"
         gui: "rb:by charge,by time"
         val: 1
      }
      Hit3DStyle: {
         doc: "How to render hits on 3D display"
         gui: "cb:boxes,towers,crossings"
         val: 3
      }
      RawDigitsModules: {
         doc: "Modules producing raw hits"
         gui: "lbm:daq,mrcc,mre,another"
         val: [
            "daq"
         ]
      }
      RawDigitsModulesAdd: {
         doc: "Additional raw digits modules"
         gui: "te"
         val: []
      }
      RawDrawingOpt: {
         doc: "How to draw hits"
         gui: "cb:mask bad channels,scale hits by charge,suppress ghosted hits, ghost dimmed hits"
         val: 2
      }
      ScaleFactor: {
         doc: "Scale factor to apply to hits"
         gui: "sl:0,5"
         val: 1.3
      }
      THistogram: {
         doc: "Draw time histogram or not?"
         gui: "rb:off,on"
         val: 1
      }
      TimeAutoZoomTruth: {
         doc: "Auto-zoom to truth times of interest"
         gui: "rb:off,on"
         val: 0
      }
      TimeBinSize: {
         doc: "Time bin size in units of ns"
         gui: "sl:0.05,10"
         val: 1
      }
      TimeRange: {
         doc: "Time range in units of usec:"
         gui: "sl:-50,150"
         val: [
            -50,
            150
         ]
      }
      WhichHits: {
         doc: "Draw raw hits or calibrated hits?"
         gui: "rb:RAW,CAL"
         val: 0
      }
      WhichQ: {
         doc: "Which calibrated charge to show?"
         gui: "rb:PE,PECOR"
         val: 0
      }
      service_type: "RawDrawingOptions"
   }
   RecoDrawingOptions: {
      CellHits: {
         doc: "Modules producing rb::CellHit"
         gui: "lbm:calhit"
         val: []
      }
      CellHitsAdd: {
         doc: "Additional cell hits modules"
         gui: "te"
         val: []
      }
      ClusterIndex: {
         doc: "module/cluster index pairs"
         gui: "te"
         val: [
            [
               -1
            ]
         ]
      }
      ClusterStyle: {
         doc: "How to render clusters"
         gui: "cb:tight box,markers,convex hull"
         val: 1
      }
      Clusters: {
         doc: "Modules producing rb::Cluster"
         gui: "lbm:slicer,mefinder"
         val: []
      }
      ClustersAdd: {
         doc: "Additional cluster modules"
         gui: "te"
         val: []
      }
      Hough: {
         doc: "Modules producing rb::HoughResult"
         gui: "lbm:multihough"
         val: []
      }
      HoughAdd: {
         doc: "Additional hough-results modules"
         gui: "te"
         val: []
      }
      HoughOpt: {
         doc: "Drawing options for HoughResult"
         gui: "rb:off,on,color by index"
         val: 0
      }
      OfflineChanOpt: {
         doc: "Draw offline channels?"
         gui: "rb:off,on"
         val: 0
      }
      OfflineChans: {
         doc: "Modules producing rb::OfflineChan"
         gui: "lbm:none"
         val: []
      }
      OfflineChansAdd: {
         doc: "Additional offline channel modules"
         gui: "te"
         val: []
      }
      ProngIndex: {
         doc: "module/cluster index pairs"
         gui: "te"
         val: [
            [
               -1
            ]
         ]
      }
      ProngOpt: {
         doc: "Prong drawing options"
         gui: "cb:as cluster,as prong"
         val: 2
      }
      Prongs: {
         doc: "Modules producing rb::Prong"
         gui: "lbm:cana,elasticarmshs,fuzzykvertex_Prongs3D,fuzzykvertex_Prongs2D,fuzzykvertex"
         val: []
      }
      ProngsAdd: {
         doc: "Additional prong modules"
         gui: "te"
         val: []
      }
      ShowerOpt: {
         doc: "Draw showers?"
         gui: "rb:off,on"
         val: 0
      }
      Showers: {
         doc: "Modules producing rb::Shower"
         gui: "lbm:none"
         val: []
      }
      ShowersAdd: {
         doc: "Additional shower modules"
         gui: "te"
         val: []
      }
      TrackIndex: {
         doc: "module/cluster index pairs"
         gui: "te"
         val: [
            [
               -1
            ]
         ]
      }
      TrackOpt: {
         doc: "Track drawing options"
         gui: "cb:as cluster,as prong,as track,ortho hits"
         val: 4
      }
      Tracks: {
         doc: "Modules producing rb::Track"
         gui: "lbm:breakpoint,cosmictrack,kalmantrack,kalmantrackmerge,windowtrack"
         val: []
      }
      TracksAdd: {
         doc: "Additional track modules"
         gui: "te"
         val: []
      }
      VertexIndex: {
         doc: "module/cluster index pairs"
         gui: "te"
         val: [
            [
               -1
            ]
         ]
      }
      VertexOpt: {
         doc: "Draw vertices?"
         gui: "rb:off,on"
         val: 0
      }
      Vertices: {
         doc: "Modules producing rb::Vertex"
         gui: "lbm:elasticarmshs,houghvertex,vertexdt"
         val: []
      }
      VerticesAdd: {
         doc: "Additional vertex modules"
         gui: "te"
         val: []
      }
      service_type: "RecoDrawingOptions"
   }
   RunHistory: {
      AbortIfMissingRunInDB: true
      AbortIfNoMask: true
      AnalysisDiBlockMasking: true
      CalHitLabel: "calhit"
      CustomMask: [
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      ]
      CustomMasking: false
      DetGainTag: ""
      DiBlockMaskTag: "v4.0"
      FDRHCRunStart: [
         23420,
         24588,
         25413,
         28037
      ]
      FDRHCRunStop: [
         23670,
         24613,
         26685,
         32397
      ]
      FakeRunNumber: 0
      GetDiBlockMaskFromCondb: true
      NDRHCRunStart: [
         11632,
         11921,
         12087,
         12517
      ]
      NDRHCRunStop: [
         11667,
         11925,
         12289,
         13131
      ]
      TimeQueries: false
      UseMasking: false
      UseQE4HWDB: true
      Verbosity: 100
      service_type: "RunHistory"
   }
   ScanOptions: {
      Categories: [
         "Neutrino",
         "X-View",
         "Y-View"
      ]
      FieldLabels: [
         "No_nu",
         "Possible_nu",
         "nu",
         "Tracks",
         "Showers",
         "Vertex_z",
         "Vertex_w",
         "Tracks",
         "Showers",
         "Vertex_z",
         "Vertex_w"
      ]
      FieldTypes: [
         "RadioButton",
         "RadioButton",
         "RadioButton",
         "Number",
         "Number",
         "Number",
         "Number",
         "Number",
         "Number",
         "Number",
         "Number"
      ]
      FieldsPerCategory: [
         3,
         4,
         4
      ]
      FileNameBase: "ScanFile"
      IncludeMCInfo: false
      service_type: "ScanOptions"
   }
   SimulationDrawingOptions: {
      Draw: {
         doc: "Which MC Truth object to draw?"
         gui: "cb:vertex,vectors,trajectories,hits,neutrals,gammas"
         val: 0
      }
      FLSHitListModules: {
         doc: "Name of module producint FLSHitList objects"
         gui: "lbm:geantgen,another"
         val: [
            "geantgen"
         ]
      }
      FLSHitStyle: {
         doc: "How to render FLS hits"
         gui: "rb:dots,lines"
         val: 0
      }
      FLSHitThresh: {
         doc: "Threshold to apply to FLS hits [MeV]"
         gui: "sl:0,10"
         val: 1
      }
      MCTruthModules: {
         doc: "Name of module producing MCTruth objects"
         gui: "lbm:generator,another"
         val: [
            "generator"
         ]
      }
      Text: {
         doc: "Which version of MC truth text to print?"
         gui: "cb:short,long"
         val: 0
      }
      TextDepthLimit: {
         doc: "Print MC truth to this depth, -1=no limit"
         gui: "sli:-1,10"
         val: -1
      }
      TextIncludeDirections: {
         doc: "Print particle birth directions"
         gui: "rb:off,on"
         val: 0
      }
      TextIncludeVertex: {
         doc: "Print particle birth points"
         gui: "rb:off,on"
         val: 0
      }
      service_type: "SimulationDrawingOptions"
   }
   SliceNavigator: {
      AutoAdvanceInterval: 1000
      AutoPrintMax: 0
      AutoPrintPattern: "evdtest"
      CellHitLabel: "calhit"
      InitialSlice: -1
      InitiallyEnabled: false
      SliceLabel: "slicer"
      SliceOpt: {
         doc: "Slice navigation options.\nApply Filter: Only navigate between slices that haven\'t been filtered out.\nDimHits: Dims out hits that can\'t be navigated to.\nDimOtherSlices: Dims hits from slices other than the current slice."
         gui: "cb:apply filter,dim noise hits,dim other slices"
         val: 0
      }
      service_type: "SliceNavigator"
   }
   TestBeamRunPeriod: {
      service_provider: "TestBeamRunPeriod"
      service_type: "TestBeamRunPeriod"
   }
   message: {
      destinations: {
         STDOUT: {
            categories: {
               ArtReport: {
                  limit: 100
               }
               MTdiagnostics: {
                  limit: 0
               }
               default: {
                  limit: -1
               }
            }
            threshold: "INFO"
            type: "cout"
         }
      }
   }
   scheduler: {
      debug: {
         fileName: "cfg.fcl"
         option: "debug-config"
         printMode: "raw"
      }
      errorOnMissingConsumes: false
      errorOnSIGINT: true
      num_schedules: 1
      num_threads: 1
      pruneConfig: true
      reportUnused: true
   }
}
source: {
   fileNames: [
      "novadata.root"
   ]
   maxEvents: -1
   module_label: "source"
   module_type: "RootInput"
}
